import { elementQuery, elementsQuery } from './elementQuery';
/**
 * Helper to add an 'optional' method to the function to make a parameter optional.
 * @param fn The function to add the 'optional' attribute to.
 */
export function addOptional(fn) {
    return Object.assign(fn, { optional: (value) => (value ? fn(value) : undefined) });
}
/**
 * Built-in ParamTypes. Use <property>.optional() instead if it is optional.
 */
export const paramType = {
    /** The parameter is expected to be a `string`. No conversion done. */
    string: addOptional((value) => value),
    /** The parameter is expected to be an `integer`. `parseInt()` is applied. */
    int: addOptional((value) => parseInt(value, 10)),
    /** The parameter is expected to be a `float`. `parseFloat()` is applied. */
    float: addOptional((value) => parseFloat(value)),
    /** The parameter is expected to be a `boolean` value. `!!` is applied. */
    bool: Object.assign(addOptional((value) => !!value), {
        setTrue: (trueValue) => addOptional((value) => value === trueValue),
        setFalse: (falseValue) => addOptional((value) => value !== falseValue),
    }),
    /** The parameter is expected to be a selector key. `getSelector()` is applied. */
    selector: Object.assign(addOptional((value) => global.getSelector(value)), {
        format: (pattern) => addOptional((value) => global.getSelector(pattern.split('{{VALUE}}').join(value))),
    }),
    /** The parameter is expected to be a selector key. `elementQuery()` is applied. */
    element: Object.assign(addOptional((value) => elementQuery(value)), {
        format: (pattern) => addOptional((value) => elementQuery(pattern.split('{{VALUE}}').join(value))),
    }),
    /** The parameter is expected to be a selector key. `elementsQuery()` is applied. */
    elements: Object.assign(addOptional((value) => elementsQuery(value)), {
        format: (pattern) => addOptional((value) => elementsQuery(pattern.split('{{VALUE}}').join(value))),
    }),
};
