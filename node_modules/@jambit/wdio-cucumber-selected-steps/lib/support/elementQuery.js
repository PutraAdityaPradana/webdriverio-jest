// fixme: support for react$ and react$$, possibly by allowing selectors to be an object like this as well:
// { selector: '...', state?: {...}, props?: {...} }
const separator = ' -> '; // fixme: make configurable?
/**
 * Get an element query for the specified text
 * @param name The text to get the selectors by. Separate nesting child selectors by " -> ".
 * @returns An ElementQuery for a single element
 * @todo Handle cases, where each selector might return multiple elements?
 * I.e. act like (elementsQuery(name)()[0] || empty-result), but ideally more performant.
 */
export function elementQuery(name) {
    const query = () => {
        const nameParts = name.split(separator);
        const selectors = nameParts.map((namePart) => global.getSelector(namePart));
        let selector = selectors.shift();
        expect(selector).toBeTruthy();
        let element = null;
        do {
            element = (element || browser).$(selector);
            selector = selectors.shift();
        } while (selector && element.isExisting());
        return element;
    };
    return Object.assign(query, { toString: () => name });
}
function selectNodes(sourceElements, remainingSelectors) {
    if (remainingSelectors.length === 0 || sourceElements.length === 0) {
        return sourceElements;
    }
    const selector = remainingSelectors.shift();
    return selectNodes(sourceElements.reduce((result, sourceElement) => result.concat(sourceElement.$$(selector)), []), remainingSelectors);
}
/**
 * Get an elements query for the specified text
 * @param name The text to get the selectors by. Separate nesting child selectors by " -> ".
 * @returns An ElementsQuery for multiple elements
 */
export function elementsQuery(name) {
    const query = () => {
        const nameParts = name.split(separator);
        expect(nameParts.length).toBeGreaterThan(0);
        const selectors = nameParts.map((namePart) => global.getSelector(namePart));
        const selector = selectors.shift();
        return selectNodes($$(selector), selectors);
    };
    return Object.assign(query, { toString: () => name });
}
