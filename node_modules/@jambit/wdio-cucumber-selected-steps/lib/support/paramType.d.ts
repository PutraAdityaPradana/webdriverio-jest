/**
 * Conversion function for input values from .feature files
 */
export interface ParamType {
    (value: string): any;
}
/**
 * Conversion function for input values from .feature files, with possibility to use optional.
 */
export interface ParamTypeWithOptional extends ParamType {
    /** Use if the parameter can be undefined */
    optional: ParamType;
}
/**
 * Conversion function for input values from .feature files, with possibility to use optional.
 */
export interface ParamTypeBool extends ParamTypeWithOptional {
    /** The parameter is expected to be a string. If it matches `trueValue`, true is returned, otherwise false. */
    setTrue(trueValue: string): ParamTypeWithOptional;
    /** The parameter is expected to be a string. If it matches `falseValue`, false is returned, otherwise true. */
    setFalse(falseValue: string): ParamTypeWithOptional;
}
/**
 * Conversion function for input values from .feature files, with possibility to use optional.
 */
export interface ParamTypeFormat extends ParamTypeWithOptional {
    /** The parameter is expected to be a string. `pattern` must contain '{{VALUE}}', which will be replaced by the parameter. */
    format(pattern: string): ParamTypeWithOptional;
}
/**
 * Helper to add an 'optional' method to the function to make a parameter optional.
 * @param fn The function to add the 'optional' attribute to.
 */
export declare function addOptional(fn: ParamType): ParamTypeWithOptional;
/**
 * Built-in ParamTypes. Use <property>.optional() instead if it is optional.
 */
export declare const paramType: {
    /** The parameter is expected to be a `string`. No conversion done. */
    string: ParamTypeWithOptional;
    /** The parameter is expected to be an `integer`. `parseInt()` is applied. */
    int: ParamTypeWithOptional;
    /** The parameter is expected to be a `float`. `parseFloat()` is applied. */
    float: ParamTypeWithOptional;
    /** The parameter is expected to be a `boolean` value. `!!` is applied. */
    bool: ParamTypeBool;
    /** The parameter is expected to be a selector key. `getSelector()` is applied. */
    selector: ParamTypeFormat;
    /** The parameter is expected to be a selector key. `elementQuery()` is applied. */
    element: ParamTypeFormat;
    /** The parameter is expected to be a selector key. `elementsQuery()` is applied. */
    elements: ParamTypeFormat;
};
